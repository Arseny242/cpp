// однонаправленный
#include<iostream>
#include <fstream>
#include<string>
using namespace std;
ifstream in("input1.txt");
ofstream out("output.txt");
template <class ltem>
class List
{struct Element
{ltem inf;
Element *next;
Element(ltem x):inf(x),next(0)
{}
};
Element *head;
int size;
Element *Find(int index)
{
    if ((index<1) || (index>size))
    {
        return NULL;
    }
    else
    {
        Element *cur=head;
        for(int i=1; i<index; i++)
        {
            cur=cur->next;
        }
        return cur;
    }
}
public:
List():head(0),size(0)
{}
~List()
{
    while(!Empty())
    {
        Remove(1);
    }
}
bool Empty()
{
return head==0;
}
int GetLength()
{
    return size;
}
ltem Get(int index)
{
if ((index<1) || (index>size))
    {
        return 0;
    }
   else
{
Element *r=Find(index);
ltem i=r->inf;
return i;
}
}
void Insert(int index, ltem data)
{
if ((index<1) || (index>size+1))
    {
        cout<<"mimo";
    }
   else
{
Element *newPtr=new Element(data);
size=GetLength()+1;
if (index==1)
{
    newPtr->next=head;
    head=newPtr;
}
else
{
    Element *prev=Find(index-1);
    newPtr->next=prev->next;
    prev->next=newPtr;
}
}
}
   void Remove(int index)
    {
        if ((index<1) || (index>size))
    {
         cout<<"NULL";
    }
    else
        {
            Element *cur;
            --size;
            if (index==1)
            {
                cur=head;
                head=head->next;
            }
            else
            {
                Element *prev=Find(index-1);
                cur=prev->next;
                prev->next=cur->next;
            }
            cur->next=NULL;
            delete cur;
        }
    }
    void Print()
    {
        for (Element *cur = head; cur!=NULL; cur=cur->next)
        {
            out<<cur->inf<<' ';
        }
        out<<endl;
    }
};
int main()
{List <string> l,l1; int k=0;
string value;
while(in>>value)
{
    l.Insert(l.GetLength()+1, value);
}
 for (int i=1; i<=l.GetLength(); i++)
{
    for (int j=1; j<=l.GetLength(); j++)
    {
        if (l.Get(i)==l.Get(j))
            k++;
    }
if (k==1)
{
    l1.Insert(l1.GetLength()+1, l.Get(i));
}
k=0;
}
l1.Print();
l.~List();
out.close();
return 0;
}
// двунаправленный
#include<iostream>
#include <fstream>
#include<string>
using namespace std;
ifstream in("input1.txt");
ofstream out("output.txt");
template <class ltem>
class DoubleLinkedList
{struct Element
{ltem inf;
Element *next;
Element *prev;
Element(ltem x):inf(x),next(0),prev(0)
{}
};
Element *head;
Element *tail;
int size;
Element *Find(int index)
{
    if ((index<1) || (index>size))
    {
        return NULL;
    }
    else
    {
        Element *cur=head;
        for(int i=1; i<index; i++)
        {
            cur=cur->next;
        }
        return cur;
    }
}
public:
DoubleLinkedList():head(0),tail(0),size(0)
{}
~DoubleLinkedList()
{
    while(!Empty())
    {
        Remove(1);
    }
}
bool Empty()
{
return head==0;
}
int GetLength()
{
    return size;
}
ltem Get(int index)
{
if ((index<1) || (index>size))
    {
        return 0;
    }
   else
{
Element *r=Find(index);
ltem i=r->inf;
return i;
}
}
void InsertLeft(int index, ltem data)
{
if ((index<1) || (index>size+1))
    {
        cout<<"mimo";
    }
   else
{
Element *newPtr=new Element(data);
size=GetLength()+1;
Element *cur=Find(index);
if (cur==NULL)
{
    head=newPtr;
    tail=newPtr;
}
else
{
    newPtr->next=cur;
    newPtr->prev=cur->prev;
    cur->prev=newPtr;
    if (cur==head)
    {
        head=newPtr;
    }
    else
    {
        newPtr->prev->next=newPtr;
    }
}
}
}
void InsertRight(int index, ltem data)
{
    if ((index<1 && head!=NULL) || (index>size+1))
    {
        cout<<" "<<endl;
    }
    else
    {
        Element *newPtr=new Element(data);
        size=GetLength()+1;
        Element *cur=Find(index);
        if (cur==NULL)
        {
            head=newPtr;
            tail=newPtr;
        }
        else
        {
            newPtr->next=cur->next;
            newPtr->prev=cur;
            cur->next=newPtr;
            if (cur==tail)
            {
                tail=newPtr;
            }
            else
            {
                newPtr->next->prev=newPtr;
            }
        }
    }
}
   void Remove(int index)
    {
        if ((index<1) || (index>size))
    {
         cout<<"NULL";
    }
    else
        {
            Element *cur=Find(index);
            --size;
            if (size==0)
            {
                head=NULL;
                tail=NULL;
            }
            else
                if (cur==head)
            {
                head=head->next;
                head->prev=NULL;
            }
            else
                if(cur==tail)
            {
                tail=tail->prev;
                tail->next=NULL;
            }
            else
            {
                 cur->prev->next=cur->next;
                 cur->next->prev=cur->prev;
            }
           cur->next=NULL;
           cur->prev=NULL;
            delete cur;
        }
    }
    void PrintLeftToRight()
    {
        for (Element *cur = head; cur!=NULL; cur=cur->next)
        {
            out<<cur->inf<<" ";
        }
        out<<endl;
    }
     void PrintRightToLeft()
    {
        for (Element *cur = tail; cur!=NULL; cur=cur->prev)
        {
            out<<cur->inf<<" ";
        }
        out<<endl;
    }
};
int main()
{DoubleLinkedList <string> l,l1; int k=0;
string value;
while(in>>value)
{
    l.InsertRight(l.GetLength(), value);
}
 for (int i=1; i<=l.GetLength(); i++)
{
    for (int j=1; j<=l.GetLength(); j++)
    {
        if (l.Get(i)==l.Get(j))
            k++;
    }
if (k==1)
{
    l1.InsertRight(l1.GetLength(), l.Get(i));
}
k=0;
}
l1.PrintLeftToRight();
l1.~DoubleLinkedList();
out.close();
return 0;
}
