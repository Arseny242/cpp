#include <iostream>
#include<cstdio>
#include<fstream>
using namespace std;
ifstream in("input.txt");
ofstream out("output.txt");
class List
{
      private:
          List *graph;
              int size;
              bool *used;
              struct Element
{
    int  inf;
Element *next;
Element(int x):inf(x),next(0)
{}
};
Element *head;

Element *Find(int index)
{
    if ((index<1) || (index>size))
    {
        return NULL;
    }
    else
    {
        Element *cur=head;
        for(int i=1; i<index; i++)
        {
            cur=cur->next;
        }
        return cur;
    }
}
                 public:
        List():head(0),size(0)
{}
bool Empty()
{
return head==0;
}
int GetLength()
{
    return size;
}
int Get(int index)
{
if ((index<1) || (index>size))
    {
        return 0;
    }
   else
{
Element *r=Find(index);
int i=r->inf;
return i;
}
}
void Insert(int index, int  data)
{
if ((index<1) || (index>size+1))
    {
        cout<<" ";
    }
   else
{
Element *newPtr=new Element(data);
size=GetLength()+1;
if (index==1)
{
    newPtr->next=head;
    head=newPtr;
}
else
{
    Element *prev=Find(index-1);
    newPtr->next=prev->next;
    prev->next=newPtr;
}
}
}
               List (int n)
{
        graph=new List[n];
        size = n;
}
void InsertGr(int a, int b)
{
     graph[a].Insert(graph[a].GetLength()+1, b);
}
void dfs(int v)
{ //cout<<v+1<<" ";
     used[v]=true;
     for(Element *cur=graph[v].head; cur!=0; cur=cur -> next)
     {
        if(!used[cur->inf])
        dfs(cur->inf);
     }
}int k=0;
void Components()
{
     used=new bool[size];
     for(int i=0; i<size; i++)
     {
             used[i]=false;
     }
        for(int i=0; i<size; i++)
           if(!used[i])
         {
             dfs(i);
             cout << "Component: ";
			for (int  j=0; j<=graph[i].GetLength(); ++j)
				cout<< graph[i].Get(j)+1<<" ";
			cout << endl;

         }

}
};
int main ()
{
int n,m,a,b,u;
    in>>n>>m;
    List G(n);
        for(int i=0; i<m; i++)
            {
                in>>a>>b;
                G.InsertGr(a-1, b-1);
            }
G.Components();
in.close();
out.close();
return 0;
}
